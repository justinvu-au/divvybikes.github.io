# Install required packages
# tidyverse for data import and wrangling
# lubridate for date functions
# ggplot for visualization

install.packages("tidyverse")
install.packages("lubridate")
install.packages("ggplot2")

library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
getwd() #displays your working directory
setwd("/kaggle/input/divvy-bikes-2019-v2") #sets your working directory

# Upload the dataset
q1_2019 <- read_csv("q1_2019_tripdata.csv")
q2_2019 <- read_csv("q2_2019_tripdata.csv")
q3_2019 <- read_csv("q3_2019_tripdata.csv")
q4_2019 <- read_csv("q4_2019_tripdata.csv")

# Get the column names
colnames(q1_2019)
colnames(q2_2019)
colnames(q3_2019)
colnames(q4_2019)

# Rename the columns to make them consistent
q2_2019 <- rename(q2_2019
                   ,trip_id = "01 - Rental Details Rental ID"
                   ,start_time = "01 - Rental Details Local Start Time"
                   ,end_time = "01 - Rental Details Local End Time"
                   ,bikeid = "01 - Rental Details Bike ID"
                   ,tripduration = "01 - Rental Details Duration In Seconds Uncapped"
                   ,from_station_name = "03 - Rental Start Station Name" 
                   ,from_station_id = "03 - Rental Start Station ID"
                   ,to_station_name = "02 - Rental End Station Name" 
                   ,to_station_id = "02 - Rental End Station ID"
                   ,usertype = "User Type"
                   ,gender = "Member Gender"
                   ,birthyear = "05 - Member Details Member Birthday Year")

# Inspect the data frame
str(q1_2019)
str(q4_2019)
str(q3_2019)
str(q2_2019)

# Convert the trip_id and bikid to "character" so they can stack correctly
q1_2019 <-  mutate(q1_2019, trip_id = as.character(trip_id)
                   ,bikeid = as.character(bikeid))
q2_2019 <-  mutate(q2_2019, trip_id = as.character(trip_id)
                   ,bikeid = as.character(bikeid))
q3_2019 <-  mutate(q3_2019, trip_id = as.character(trip_id)
                   ,bikeid = as.character(bikeid))
q4_2019 <-  mutate(q4_2019, trip_id = as.character(trip_id)
                   ,bikeid = as.character(bikeid))  

# Stack all individual data frames to a big data frame
all_trips <- bind_rows(q1_2019, q2_2019, q3_2019, q4_2019)

# Inspect the new table 
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame
str(all_trips)  #See list of columns and data types
summary(all_trips)  #Statistical summary of data

# In the "usertype" column, replace "Subscriber" with "member" and "Customer" with "casual"
# Seeing how many observations fall under each usertype
table(all_trips$usertype)

# Reassign to the desired values
all_trips <-  all_trips %>% 
  mutate(usertype = recode(usertype
                           ,"Subscriber" = "member"
                           ,"Customer" = "casual"))

# Check to make sure the proper number of observations were reassigned
table(all_trips$usertype)

# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year
all_trips$date <- as.Date(all_trips$start_time) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or tripduration was negative
# We will create a new dataframe (v2) since data is being removed
all_trips_v2 <- all_trips[!(all_trips$from_station_name == "HQ QR" | all_trips$tripduration<0),]

# Descriptive analysis on tripduration (all figures in seconds)
summary(all_trips_v2$tripduration)

# Compare members and casual users
aggregate(all_trips_v2$tripduration ~ all_trips_v2$usertype, FUN = mean)
aggregate(all_trips_v2$tripduration ~ all_trips_v2$usertype, FUN = median)
aggregate(all_trips_v2$tripduration ~ all_trips_v2$usertype, FUN = max)
aggregate(all_trips_v2$tripduration ~ all_trips_v2$usertype, FUN = min)

# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$tripduration ~ all_trips_v2$usertype + all_trips_v2$day_of_week, FUN = mean)

# Arrange the day of week following the order
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Now, run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$tripduration ~ all_trips_v2$usertype + all_trips_v2$day_of_week, FUN = mean)

# Analyze ridership data by type and weekday, then visualize the number of rides by riders type
all_trips_v2 %>% 
  mutate(weekday = wday(date, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(usertype, weekday) %>%                 #groups by usertype and weekday
  summarise(number_of_rides = n()                 #calculates the number of rides and average duration 
  ,average_duration = mean(tripduration)) %>%     # calculates the average duration
  arrange(usertype, weekday) %>%                  # sorts
ggplot(all_trips_v2, mapping = aes(x = weekday, y = number_of_rides, fill = usertype)) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 45))

# Create a visualization for average duration
all_trips_v2 %>% 
  mutate(weekday = wday(date, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(usertype, weekday) %>%                 #groups by usertype and weekday
  summarise(number_of_rides = n()                 #calculates the number of rides and average duration 
  ,average_duration = mean(tripduration)) %>%     # calculates the average duration
  arrange(usertype, weekday) %>%                  # sorts
ggplot(all_trips_v2, mapping = aes(x = weekday, y = average_duration, fill = usertype)) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 45))

# EXPORT SUMMARY FILE FOR FURTHER ANALYSIS
counts <- aggregate(all_trips_v2$tripduration ~ all_trips_v2$usertype + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts, file = '/kaggle/input/divvy-bikes-2019-v2/case_study_01.csv')
